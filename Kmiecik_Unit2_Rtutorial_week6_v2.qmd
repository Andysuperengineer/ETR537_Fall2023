---
title: "Unit 2: Rtutorial"
author: "Andy Kmiecik"
format: html
editor: visual
---

## Week 6: Working with Data

In the previous R tutorial, we started to work on science classroom dataset. We applied the data intensive research steps to explore our data and investigate the relationship between students' grades and time-spent.

Let's remember which libraries and functions we used!

#### [**Your Turn:**]{.underline}

Please write down one or two sentence to explain why and how we use the following libraries and functions.

1.  **tidyverse:**The tidyverse is a collection of R packages designed for data science, offering tools to manipulate, visualize, and model data in a consistent and readable manner.

2.  **skimr:**The skimr package provides functions to generate concise summaries of data, helping to quickly understand the structure and distribution of variables.

3.  **ggplot:**ggplot is a plotting system in the tidyverse that allows for creating complex visualizations using a layered approach, making it easier to represent data graphically.

4.  **read_csv():**The read_csv() function, part of the readr package in tidyverse, is used to import CSV files into R, converting them into tibbles or data frames.

5.  **view():**The View() function in RStudio provides a spreadsheet-like display of datasets, allowing for a more intuitive inspection of data.

6.  **glimpse():**The glimpse() function, part of the dplyr package in tidyverse, offers a quick overview of the structure and types of columns in a dataset.

7.  **head():** The head() function displays the first few rows of a dataset, useful for quickly previewing the beginning of your data.

8.  **tail():**The tail() function shows the last few rows of a dataset, helping to quickly inspect the end of your data.

9.  **select():**The select() function, part of the dplyr package, is used to choose specific columns from a dataset, allowing for focused analysis on particular variables.

10. **filter():**The filter() function, also from dplyr, is used to subset data based on specified conditions, enabling targeted analysis on specific data points.

11. **arrange():**The arrange() function, another dplyr tool, sorts a dataset based on specified columns, aiding in organizing data for better understanding.

12. **desc():** Used in conjunction with arrange(), the desc() function sorts data in descending order based on the specified column.

13. **geom_histogram():**A function in ggplot, geom_histogram() creates histogram visualizations, which are useful for understanding the distribution of a continuous variable.

14. **geom_point():** Another ggplot function, geom_point() produces scatter plots, aiding in visualizing relationships between two continuous variables.

### Load the Tidyverse Package

Let's start our R code along by loading the tidyverse package.

```{r}
library (tidyverse)
```

### Load the online science class data

Now, load the online science class data from the data folder and assign your data to a new object.

```{r}
sci_online_classes <- read_csv("Data/sci-online-classes.csv")
View(sci_online_classes)
class(sci_online_classes)
```

You loaded the data, now what should we do?

```{r}
sci_online_classes

```

#### [**Your Turn:**]{.underline}

Examine the contents of sci_classes in your console. You should type the object name to the console and check that.

**Question:** Is your object a tibble? How do you know? 

**Your response here:**Sci_online_classes appears to be a tabular dataset with multiple columns and rows. I originally marked it as no because it had more than 10 rows, however when I type class(sci_online_classes) into the console, it tells me it is a tibble. Because, If the result is "tibble" or "tbl_df", then it's a tibble. which it is. 

**Hint:** Check the output in the console.

### Check your data with different functions

You can check your data with different functions. Let's remember how we use different functions to check our data.

```{r}
view(sci_online_classes)
head(sci_online_classes)
tail(sci_online_classes)
glimpse(sci_online_classes)
```

### **Isolating Data with dplyr**

We will use select() function to select the following columns from our data.

-   student_id

-   subject

-   semester

-   FinalGradeCEMS

-   After selecting these columns, assign that to a new object with a name of "student_grade".

```{r}
student_grade<-sci_online_classes |>
  select(student_id, semester, FinalGradeCEMS)
```

#### [**Your Turn:**]{.underline}

Examine students' grades, what did you realize about it? 

**Your response here:**Nothing unusual, there are grades and some NA's. Maybe they dropped the class or something?

**Hint:** Check the missing data.

### **Specific select**

Now, we will make a specific selection.

-   Select all columns except subject and semester.

-   Assign to a new object with a different name.

-   Examine your data frame.

```{r}
new_object<-select(sci_online_classes, -c(subject, semester))
```

Checking the data frame:

```         
new_object
```

#### [**Your Turn:**]{.underline}

-   Select all columns except student_id and FinalGradeCEMS.

-   Assign to a new object with a different name.

-   Examine your data frame.

```{r}
new_object2<-select(sci_online_classes, -c(student_id, FinalGradeCEMS))
```

### **Specific select**

-   Select only the columns that start with Time

-   Assign to a new object with a different name.

-   Use view() function to examine your data frame.

```{r}
time_object<-select(sci_online_classes, starts_with("time"))

```

#### [**Your Turn:**]{.underline}

-   Select only the columns that ends with "r"

-   Assign to a new object with a different name.

-   Use view() function to examine your data frame.

```{r}
r_object<-select(sci_online_classes, ends_with("r"))
view(r_object)
```

### Filter Function

-   Filter the sci_classes data frame for just males.

-   Assign to a new object.

-   Use the head() function to examine your data frame.

```{r}
males_students<-sci_online_classes|> 
  filter(Gender=="M")
head(males_students)
```

#### [**Your Turn:**]{.underline}

-   Filter the sci_classes data frame for just females.

-   Assign to a new object.

-   Use the tail() function to examine your data frame.

```{r}
females_students<-sci_online_classes|> 
  filter(Gender=="F")
tail(females_students)
```

Let's try filter function with two arguments now.

-   Filter the sci_classes data frame for students whose

-   percentage_earned is greater than 0.8

-   in the class "BioA"

-   Assign to a new object.

-   Use the tail() function to examine your data frame. 

```{r}

bio_students<-filter(sci_online_classes, percentage_earned>0.8 & subject=="BioA")

bio_students2<-sci_online_classes|>
                  filter(percentage_earned>0.8 & subject=="BioA")

tail(bio_students)
```

[**Your Turn:**]{.underline}

Filter the sci_classes data frame for students whose

-   percentage_earned is smaller or equal to 0.6

-   Assign to a new object.

-   Use the head() function to examine your data frame. 

```{r}
FrScA_students<-sci_online_classes|>
                  filter(percentage_earned<=0.6 & subject=="FrScA")
head(FrScA_students)
```

Let's use filter () function for the missing data.

-   Filter the sci_classes data frame so rows with 

-   NA for points earned are removed.

-   Assign to a new object.

-   Use the glimpse() function to examine your data frame.

```{r}
clean_data<-sci_online_classes|>
  filter(!is.na(Points_Earned))

glimpse(clean_data)
```

Filter the sci_classes data for the following subjects:

-   BioA

-   PhysA

-   OcnA

-   Assign to a new object with a different name.

-   Use the summary() function to examine your data frame.

```{r}
my_classes<-filter(sci_online_classes, subject %in% c("BioA", "PhysA", "OcnA"))

my_classes2<-sci_online_classes |>
  filter(subject %in% c("BioA", "PhysA", "OcnA"))
```

### Arrange () Function

Let's recall how we were using the arrange () function for our dataset.

-   Arrange sci_classes by subject then 

-   percentage_earned in descending order.

-   Assign to a new object.

-   Use the str() function to examine your data frame.

```{r}
order_classes<-sci_online_classes |>
  arrange(subject, desc(percentage_earned))

str(order_classes)
```

## %\>% Pipe Operator

Using sci_classes data and the %\>% pipe operator:

-   Select subject, section, time spent in hours and final course grade.

-   Filter for students in OcnA courses with grades greater than or equal to 60.

-   Arrange grades by section in descending order.

-   Assign to a new object.

Examine the contents using a method of your choosing.

```{r}
fire<-sci_online_classes %>%
  select(subject, section, TimeSpent_hours, FinalGradeCEMS) %>%
  filter(subject=="OcnA"& FinalGradeCEMS>=60) %>%
  arrange(desc(section))
view(fire)
```

### Deriving info with dplyr

We will practice summarise () and group_by () functions now.

### Summarise () Function

Using sci_classes data and the summarise() function:

-   Get a distinct count of course ids.

-   Use the %\>% operator

```{r}
sci_online_classes |>
  summarise(courses=n_distinct(course_id))
```

-   Get a distinct count of course ids.

-   Use the \|\> operator

```{r}
sci_online_classes %>%
  summarise(courses=n_distinct(course_id))
```

### Group_by () Function

Using the sci_classes data and the pipe operator.

-   Filter final grades to remove NAs. \_\>is.na

-   Group your data by subject and gender.

-   Summarise your data to calculate the following stats:

-   total number of students

-   mean final grade

-   mean time spent in the course

-   Assign to a new object

-   Examine the contents using a method of your choosing.

```{r}
apple<-sci_online_classes %>%
  filter(!is.na(FinalGradeCEMS)) %>%
  group_by(subject, Gender) %>%
  summarise(total=sum(student_id), grade=mean(FinalGradeCEMS), time=mean(TimeSpent_hours))



```

### Mutate () Function

Replace the dashed lines in the following code to;

-   Create a new variable called score that is the product of percentage earned and 100

-   Create a faceted scatter plot with hours spent in the course on the x-axis, score on the y-axis, and point colored by gender.

-   Include an alpha value to your graph.

```{r eval=FALSE}
sci_online_classes %>%
  mutate(score = percentage_earned * 100) %>%
  ggplot() +
  geom_point(aes(x = TimeSpent_hours, 
                 y= score,
                 color = Gender,
                 alpha = 0.5)) +
  facet_wrap(~subject)

```

## Final Step:

You are almost done, all you need to is to render your file and publish it in one of the following platform.

#### [**Your Turn:**]{.underline}

**Render File:** For now, we will wrap up this work by converting our work into a webpage that can be used to communicate your learning and demonstrate some of your new R skills. To do so, you will need to "render" your document by clicking the Render button in the menu bar at that the top of this file. This will do two things; it will:

1.  check through all your code for any errors; and,

2.  create a file in your directory that you can use to share you work through [Posit Cloud](https://posit.cloud/learn/guide#publish-from-cloud), [RPubs](https://rpubs.com "RPubs") , [GitHub Pages](https://pages.github.com "GitHub Pages"), [Quarto Pub](https://quartopub.com "Quarto Pub"), or other methods.

3.  Submit your link to the Blackboard!

Now that you've finished your Rtutorial study, scroll back to the very top of this Quarto Document and change the author: "YOUR NAME HERE" to your actual name surrounded by quotation marks like so: author: "Dr. Cansu Tatar".

#### 
